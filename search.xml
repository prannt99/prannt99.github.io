<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>1-复习Mybatis-Plus-MP</title>
      <link href="/2021/12/12/1-%E5%A4%8D%E4%B9%A0Mybatis-Plus-MP/"/>
      <url>/2021/12/12/1-%E5%A4%8D%E4%B9%A0Mybatis-Plus-MP/</url>
      
        <content type="html"><![CDATA[<h3 id="本项目是一个在线教育项目，采用前后端分离技术，技术栈如下："><a href="#本项目是一个在线教育项目，采用前后端分离技术，技术栈如下：" class="headerlink" title="本项目是一个在线教育项目，采用前后端分离技术，技术栈如下："></a><strong>本项目是一个在线教育项目，采用前后端分离技术，技术栈如下：</strong></h3><ul><li>前端： Vue、Element-ui、Axios、Node.js … </li><li>后端：SpringBoot、SpringCloud、Mybatis-Plus、SpringSecurity、Redis、Maven、EasyExcel、JWT、OAuth2 … </li><li>其他：阿里云OSS、阿里云视频点播服务、腾讯云短信服务、微信登录和支付、Docker、Git、Jenkins、Nginx … </li></ul><p><em>今天主要复习Mybatis-Plus(MP)，因为持久层技术是本项目的重点之一。</em> </p><h4 id="创建数据库表"><a href="#创建数据库表" class="headerlink" title="创建数据库表"></a><strong>创建数据库表</strong></h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">user</span><span class="token punctuation">(</span>    id          <span class="token keyword">bigint</span> <span class="token keyword">auto_increment</span> <span class="token keyword">comment</span> <span class="token string">'主键ID'</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    name        <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span>    age         <span class="token keyword">int</span>         <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'年龄'</span><span class="token punctuation">,</span>    email       <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'邮箱'</span><span class="token punctuation">,</span>    create_time <span class="token keyword">datetime</span>    <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>    update_time <span class="token keyword">datetime</span>    <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'修改时间'</span><span class="token punctuation">,</span>    version     <span class="token keyword">int</span>         <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'版本（测试乐观锁）'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="新建SpringBoot工程并引入依赖、编写配置文件"><a href="#新建SpringBoot工程并引入依赖、编写配置文件" class="headerlink" title="新建SpringBoot工程并引入依赖、编写配置文件"></a><strong>新建SpringBoot工程并引入依赖、编写配置文件</strong></h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- MP依赖 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.4.3.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- MySql依赖 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- lombok依赖 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/mybatis_plus1<span class="token punctuation">?</span>serverTimezone=GMT%2B8    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> root<span class="token comment"># 查看sql执行过程</span><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>    <span class="token key atrule">log-impl</span><span class="token punctuation">:</span> org.apache.ibatis.logging.stdout.StdOutImpl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="entity、mapper"><a href="#entity、mapper" class="headerlink" title="entity、mapper"></a><strong>entity、mapper</strong></h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 主键生成策略：自增 </span>    <span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">IdType</span><span class="token punctuation">.</span>AUTO<span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>        <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> <span class="token class-name">FieldFill</span><span class="token punctuation">.</span>INSERT<span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> createTime<span class="token punctuation">;</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> <span class="token class-name">FieldFill</span><span class="token punctuation">.</span>INSERT_UPDATE<span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> updateTime<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Version</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> <span class="token class-name">FieldFill</span><span class="token punctuation">.</span>INSERT<span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> version<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span>     <span class="token comment">// 不加该注解在测试类的@Autowired中会报错</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Mybatis-Plus测试"><a href="#Mybatis-Plus测试" class="headerlink" title="Mybatis-Plus测试"></a><strong>Mybatis-Plus测试</strong></h4><ol><li><h5 id="查询所有数据"><a href="#查询所有数据" class="headerlink" title="查询所有数据"></a>查询所有数据</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">UserMapper</span> userMapper<span class="token punctuation">;</span>    <span class="token comment">// 查询user表中的所有数据</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/12/12/1-%E5%A4%8D%E4%B9%A0Mybatis-Plus-MP/1.jpg" class title="查询出所有数据"></li><li><h5 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// mp实现添加操作</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Prannt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"prannt@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> insert <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"insert = "</span> <span class="token operator">+</span> insert<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h5 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// update</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1461239461974220801L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">130</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> row <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/12/12/1-%E5%A4%8D%E4%B9%A0Mybatis-Plus-MP/2.jpg" class title="修改数据"></li><li><h5 id="测试乐观锁"><a href="#测试乐观锁" class="headerlink" title="测试乐观锁"></a>测试乐观锁</h5><ul><li><h6 id="在实体类的字段上添加注解"><a href="#在实体类的字段上添加注解" class="headerlink" title="在实体类的字段上添加注解"></a>在实体类的字段上添加注解</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Version</span><span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> <span class="token class-name">FieldFill</span><span class="token punctuation">.</span>INSERT<span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">Integer</span> version<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><h6 id="配置乐观锁插件"><a href="#配置乐观锁插件" class="headerlink" title="配置乐观锁插件"></a>配置乐观锁插件</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>mpdemo1010<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.atguigu.mpdemo1010.mapper"</span><span class="token punctuation">)</span>  <span class="token comment">// 扫描到mapper接口所在的包</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MpConfig</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 配置乐观锁插件</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">MybatisPlusInterceptor</span> <span class="token function">mybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">MybatisPlusInterceptor</span> interceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        interceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OptimisticLockerInnerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> interceptor<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h6 id="给version字段添加初始值"><a href="#给version字段添加初始值" class="headerlink" title="给version字段添加初始值"></a>给version字段添加初始值</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>mpdemo1010<span class="token punctuation">.</span>handler</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMetaObjectHandler</span> <span class="token keyword">implements</span> <span class="token class-name">MetaObjectHandler</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertFill</span><span class="token punctuation">(</span><span class="token class-name">MetaObject</span> metaObject<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 为版本号添加初始值</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"version"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h6 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">testOptimisticLocker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 先查再改</span>    <span class="token comment">// 根据id查询数据</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token number">1461239461974220804l</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 修改查查来的这条数据</span>    user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 每修改一次，version +1，因为我已经修改3次了，所以version为3</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h6 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h6><img src="/2021/12/12/1-%E5%A4%8D%E4%B9%A0Mybatis-Plus-MP/3.jpg" class title="测试乐观锁"></li></ul></li><li><h5 id="多个id批量删除（用的不多）"><a href="#多个id批量删除（用的不多）" class="headerlink" title="多个id批量删除（用的不多）"></a>多个id批量删除（用的不多）</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectDemo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectBatchIds</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token number">2L</span><span class="token punctuation">,</span> <span class="token number">3L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 因为数据库中只有id = 1的记录，所以只返回一条记录 </span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/12/12/1-%E5%A4%8D%E4%B9%A0Mybatis-Plus-MP/4.jpg" class title="多个id批量删除"></li><li><h5 id="分页查询（用的多）"><a href="#分页查询（用的多）" class="headerlink" title="分页查询（用的多）"></a>分页查询（用的多）</h5><ul><li><h6 id="配置分页插件"><a href="#配置分页插件" class="headerlink" title="配置分页插件"></a>配置分页插件</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.atguigu.mpdemo1010.mapper"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MpConfig</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 配置分页插件</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">MybatisPlusInterceptor</span> <span class="token function">page</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">MybatisPlusInterceptor</span> interceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        interceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PaginationInnerInterceptor</span><span class="token punctuation">(</span><span class="token class-name">DbType</span><span class="token punctuation">.</span>H2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> interceptor<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h6 id="编写分页代码"><a href="#编写分页代码" class="headerlink" title="编写分页代码"></a>编写分页代码</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">testPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 1.创建page对象</span>    <span class="token comment">// 传入两个参数:当前页和每页显示记录数</span>    <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2.分页查询</span>    userMapper<span class="token punctuation">.</span><span class="token function">selectPage</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 通过page对象获取分页数据</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getCurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 当前页  1</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 每页数据的list集合</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 每页显示的记录数     3</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 总记录数     8</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 一共有多少页   3</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 是否有下一页   true</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">hasPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 是否有上一页   false</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><h5 id="物理删除、逻辑删除"><a href="#物理删除、逻辑删除" class="headerlink" title="物理删除、逻辑删除"></a>物理删除、逻辑删除</h5><ul><li><h6 id="物理删除：从硬盘中删除数据，删掉就真的从数据库里消失了"><a href="#物理删除：从硬盘中删除数据，删掉就真的从数据库里消失了" class="headerlink" title="物理删除：从硬盘中删除数据，删掉就真的从数据库里消失了"></a>物理删除：从硬盘中删除数据，删掉就真的从数据库里消失了</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 物理删除</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDeleteById</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 根据id查询数据</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token number">1461239461974220809l</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span><span class="token number">1461239461974220809l</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h6 id="逻辑删除：数据库中的字段-deleted表示是否删除（删除之后记录还存在于数据库中，但是deleted字段变为1）"><a href="#逻辑删除：数据库中的字段-deleted表示是否删除（删除之后记录还存在于数据库中，但是deleted字段变为1）" class="headerlink" title="逻辑删除：数据库中的字段 deleted表示是否删除（删除之后记录还存在于数据库中，但是deleted字段变为1）"></a>逻辑删除：数据库中的字段 <code>deleted</code>表示是否删除（删除之后记录还存在于数据库中，但是deleted字段变为1）</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 1.在数据库表中添加逻辑删除的字段，对应实体类添加属性</span><span class="token annotation punctuation">@TableLogic</span><span class="token keyword">private</span> <span class="token class-name">Integer</span> delete<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># 2.在实体类上加注解</span><span class="token attr-name">mybatis-plus.global-config.db-config.logic-delete-value</span><span class="token punctuation">=</span><span class="token attr-value">1</span><span class="token attr-name">mybatis-plus.global-config.db-config.logic-not-delete-value</span><span class="token punctuation">=</span><span class="token attr-value">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 3.测试</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">testDeleteBatchIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">deleteBatchIds</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h6 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h6><img src="/2021/12/12/1-%E5%A4%8D%E4%B9%A0Mybatis-Plus-MP/4.jpg" class title="多个id批量删除"></li></ul></li><li><h5 id="复杂条件查询"><a href="#复杂条件查询" class="headerlink" title="复杂条件查询"></a>复杂条件查询</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// MybatisPlus实现复杂条件查询</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">testSelectQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 创建QueryWrapper对象</span>    <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 通过QueryWrapper设置条件</span>    <span class="token comment">// ge/gt/le/lt</span>    <span class="token comment">// 查询age >= 30的记录</span>    wrapper<span class="token punctuation">.</span><span class="token function">ge</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// eq/ne</span>    wrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"Lucy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// between</span>    <span class="token comment">// 年龄在20-30范围</span>    wrapper<span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// like</span>    wrapper<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// orderByDesc</span>    wrapper<span class="token punctuation">.</span><span class="token function">orderByDesc</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// last</span>    wrapper<span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token string">"limit 3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 指定要查询的列</span>    wrapper<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h5 id="自动填充"><a href="#自动填充" class="headerlink" title="自动填充"></a>自动填充</h5><ul><li><h6 id="在相关实体上添加注解"><a href="#在相关实体上添加注解" class="headerlink" title="在相关实体上添加注解"></a>在相关实体上添加注解</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> <span class="token class-name">FieldFill</span><span class="token punctuation">.</span>INSERT<span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">Date</span> createTime<span class="token punctuation">;</span><span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> <span class="token class-name">FieldFill</span><span class="token punctuation">.</span>INSERT_UPDATE<span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">Date</span> updateTime<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><h6 id="配置handler"><a href="#配置handler" class="headerlink" title="配置handler"></a>配置handler</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMetaObjectHandler</span> <span class="token keyword">implements</span> <span class="token class-name">MetaObjectHandler</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 使用mp实现添加操作，该方法会执行</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertFill</span><span class="token punctuation">(</span><span class="token class-name">MetaObject</span> metaObject<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"createTime"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 根据名称设置属性值</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"updateTime"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 使用mp实现修改操作，该方法会执行</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateFill</span><span class="token punctuation">(</span><span class="token class-name">MetaObject</span> metaObject<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"updateTime"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 谷粒学院项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> MyBatis-Plus </tag>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>缓存雪崩</title>
      <link href="/2021/12/12/%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9/"/>
      <url>/2021/12/12/%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9/</url>
      
        <content type="html"><![CDATA[<h2 id="简述缓存雪崩"><a href="#简述缓存雪崩" class="headerlink" title="简述缓存雪崩"></a>简述缓存雪崩</h2><p>缓存雪崩，即：缓存中的数据大批量过期，缓存数据同时失效，此时用户发过来的数据请求就全打到数据库上，查询数据多一点，数据库可能直接宕机，从而形成一系列连锁反应，造成整个系统崩溃。</p><p>雪崩问题在国外叫做：stampeding herd（奔逃的野牛），指的是cache crash后，流量会像奔逃的野牛一样，打向后端。</p> <img src="/2021/12/12/%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9/%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A91.jpg" class title="访问正常走缓存的情形"> <img src="/2021/12/12/%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9/%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A92.jpg" class title="缓存失效的情形"><h3 id="以下分别从MySQL的角度和Redis的角度来分析这个问题："><a href="#以下分别从MySQL的角度和Redis的角度来分析这个问题：" class="headerlink" title="以下分别从MySQL的角度和Redis的角度来分析这个问题："></a><strong>以下分别从MySQL的角度和Redis的角度来分析这个问题：</strong></h3><p><strong>从MySQL的角度出发</strong></p><p>无论是对很多键（key）的并发查询（缓存雪崩），还是一次性对同一个键的很多次并发查询（缓存击穿，下篇文章），MySQL的解决方法都是简单粗暴：强行减少请求量。</p><p>如何减少请求量呢？<strong>答案是：Synchronized，同步锁。</strong>如下左图所示，没有加锁时，线程可以并发读取数据库；右图中加锁了，线程只能同步访问数据库，等一个线程执行完并释放锁，其他线程才可以竞争这把锁。这样一来，数据库的压力瞬间就降下来了。</p> <img src="/2021/12/12/%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9/%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A93.jpg" class title="同步锁"> <p>这个解决方法带来的问题也很明显：用户体验卡顿。通过牺牲用户体验来保证数据库不宕机。 </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 模拟加锁排队</span><span class="token keyword">public</span> object <span class="token class-name">GetProductListNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> cacheTime <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> cacheKey <span class="token operator">=</span> <span class="token string">"product_list"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> lockKey <span class="token operator">=</span> cacheKey<span class="token punctuation">;</span>    <span class="token class-name">String</span> cacheValue <span class="token operator">=</span> <span class="token class-name">CacheHelper</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheValue <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> cacheValue<span class="token punctuation">;</span>  <span class="token comment">// 返回缓存中的数据</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 直接访问数据库</span>        <span class="token keyword">synchronized</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 同步锁</span>            cacheValue <span class="token operator">=</span> <span class="token class-name">CacheHelper</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheValue <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> cacheValue<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>              <span class="token comment">// sql查询数据</span>                cacheValue <span class="token operator">=</span> <span class="token class-name">GetProductListFromDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token class-name">CacheHelper<span class="token punctuation">.</span>Add</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> cacheValue<span class="token punctuation">,</span> cacheTime<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> cacheValue<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相对于缓存击穿的情形，对缓存雪崩采取这种策略，效果并不会这么给力。原因也很简单，此时很多客户端的访问请求，不单单是基于一个键，并发量的减少不会像缓存击穿这么明显。 </p><p>2.<strong>从Redis的角度出发</strong></p><ul><li>设置热点数据不过期</li><li>设置随机过期时间，避免缓存在同一时间大批失效。换句话，就是让缓存失效时间均匀一点。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 模拟设置随机过期时间</span><span class="token keyword">public</span> object <span class="token class-name">GetProductListNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> cacheTime <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> cacheKey <span class="token operator">=</span> <span class="token string">"product_list"</span><span class="token punctuation">;</span>    <span class="token comment">// 缓存标记：记录缓存数据是否过期</span>    <span class="token class-name">String</span> cacheSign <span class="token operator">=</span> cacheKey <span class="token operator">+</span> <span class="token string">"_sign"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> sign <span class="token operator">=</span> <span class="token class-name">CacheHelper<span class="token punctuation">.</span>Get</span><span class="token punctuation">(</span>cacheSign<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取缓存值</span>    <span class="token class-name">String</span> cacheValue <span class="token operator">=</span> <span class="token class-name">CacheHelper<span class="token punctuation">.</span>Get</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sign <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> cacheValue<span class="token punctuation">;</span>   <span class="token comment">// 未过期，直接返回</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">CacheHelper<span class="token punctuation">.</span>Add</span><span class="token punctuation">(</span>cacheSign<span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">,</span> cacheTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ThreadPool<span class="token punctuation">.</span>QueueUserWorkItem</span><span class="token punctuation">(</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token comment">// sql查询数据</span>            cacheValue <span class="token operator">=</span> <span class="token class-name">GetProductListFromDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 日期设为缓存时间的2倍，用于脏读</span>          <span class="token class-name">CacheHelper<span class="token punctuation">.</span>Add</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> cacheValue<span class="token punctuation">,</span> cacheTime <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> cacheValue<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="如果我们一开始就没缓存怎么办？"><a href="#如果我们一开始就没缓存怎么办？" class="headerlink" title="如果我们一开始就没缓存怎么办？"></a><strong>如果我们一开始就没缓存怎么办？</strong></h3><p>在项目发布伊始，数据库中存满了数据，缓存却是空的。如果此时系统上线，请求又多，那就是妥妥的雪崩。甚至可以说，雪崩是这种情况下的必然事件。</p><p>那么这种情况应该怎么处理呢？这里得引入一个名词：<strong>灰度发布。</strong></p><p><strong>灰度发布</strong></p><p>首先灰这个词是怎么来的呢？当然是由黑和白混合出来的，互联网一般会采用新系统完全上线或者新系统没上线定义为黑和白。所以新产品在处于<strong>没有完全上线</strong>的状态，就被定义为灰了。我们经常听说的A/B测试就是一种灰度发布方式，即<strong>一部分用户继续用老系统A，另一部分用户用新系统B</strong>，如果用户对新系统意见不大，甚至反馈比A好，那就逐步扩大范围，慢慢把所有用户都迁移到B上来。</p><p>如果采用灰度发布进行缓存预热，一开始流量小，数据库能hold住，缓存也可以多出很多数据，渐渐增加流量，缓存也不为空，就轻轻松松解决这个问题了。</p><h3 id="缓存雪崩处理原则"><a href="#缓存雪崩处理原则" class="headerlink" title="缓存雪崩处理原则"></a><strong>缓存雪崩处理原则</strong></h3><p><em><strong>面试官：如果某个查询逻辑确实复杂，数据库回应很慢，Redis对这条查询又没缓存，这种情况引起雪崩，我们怎么处理？</strong></em></p><p>题目解析：用户A发了个非常复杂的查询请求，后端数据库收到查询后，开始执行查询，由于查询可能涉及多表联查，花的时间不少，还在查询过程中， 此时用户B,C,D,E,F…..发了同样复杂的请求过来，由于缓存此时为空，请求毫无疑问，就打到了数据库上，要是服务器性能差点，数据库就雪崩了。此时咱们外层看着好像Mysql收到的请求好像也不多啊…</p><p>遇到这种情况，一定具体分析业务大体需求了。</p><ul><li>如果注重时效性，那就得一开始就对这些复杂查询做缓存。</li><li>不注重，那就上锁，加锁，超时的请求返回错误信息等等，减少数据库压力。</li></ul><h3 id="预防和解决缓存雪崩问题"><a href="#预防和解决缓存雪崩问题" class="headerlink" title="预防和解决缓存雪崩问题"></a><strong>预防和解决缓存雪崩问题</strong></h3><h5 id="一、保证缓存层服务的高可用"><a href="#一、保证缓存层服务的高可用" class="headerlink" title="一、保证缓存层服务的高可用"></a><strong>一、保证缓存层服务的高可用</strong></h5><p>如果缓存层设计成高可用的，即使个别节点、个别机器、甚至是机房宕掉，依然可以提供服务，例如 Redis Sentinel 和 Redis Cluster 都实现了高可用。</p><h6 id="部署方式一：双机房部署，一套Redis-Cluster，部分机器在一个机房，另一部分机器在另外一个机房。"><a href="#部署方式一：双机房部署，一套Redis-Cluster，部分机器在一个机房，另一部分机器在另外一个机房。" class="headerlink" title="部署方式一：双机房部署，一套Redis Cluster，部分机器在一个机房，另一部分机器在另外一个机房。"></a><strong>部署方式一</strong>：双机房部署，一套Redis Cluster，部分机器在一个机房，另一部分机器在另外一个机房。</h6><h6 id="部署方式二：双机房部署，两套Redis-Cluster，两套Redis-Cluster之间做一个数据同步。"><a href="#部署方式二：双机房部署，两套Redis-Cluster，两套Redis-Cluster之间做一个数据同步。" class="headerlink" title="部署方式二：双机房部署，两套Redis Cluster，两套Redis Cluster之间做一个数据同步。"></a><strong>部署方式二</strong>：双机房部署，两套Redis Cluster，两套Redis Cluster之间做一个数据同步。</h6><h5 id="二、设置缓存不过期"><a href="#二、设置缓存不过期" class="headerlink" title="二、设置缓存不过期"></a><strong>二、设置缓存不过期</strong></h5><p>Redis中保存的 key 永不失效，这样就不会出现大量缓存同时失效的问题，但是随之而来的就是Redis 需要更多的存储空间。</p><h5 id="三、优化缓存过期时间"><a href="#三、优化缓存过期时间" class="headerlink" title="三、优化缓存过期时间"></a><strong>三、优化缓存过期时间</strong></h5><p>设计缓存时，为每一个 key 选择合适的过期时间，避免大量的 key 在同一时刻同时失效，造成缓存雪崩。</p><h5 id="四、熔断、降级组件"><a href="#四、熔断、降级组件" class="headerlink" title="四、熔断、降级组件"></a><strong>四、熔断、降级组件</strong></h5><p>无论是缓存层还是存储层都会有出错的概率，可以将它们视为资源。作为并发量较大的分布式系统，假如有一个资源不可用，可能会造成所有线程在获取这个资源时异常，造成整个系统不可用。降级在高并发系统中是非常正常的，比如推荐服务中，如果个性化推荐服务不可用，可以降级补充热点数据，不至于造成整个推荐服务不可用。常见的限流降级组件如 Hystrix、Sentinel 等。</p>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
